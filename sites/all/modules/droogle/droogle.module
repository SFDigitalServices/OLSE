<?php

/**
 * @file
 * A module to integrate Drupal with Google Drive.
 * Created by:  James Barnett, Babson College 2014.
 */

/**
 * Implements hook_help().
 */
function droogle_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#droogle":
      $output = '<p>' . t("The module connects Drupal to Google Drive") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function droogle_permission() {
  return array(
    'administer droogle' => array(
      'title' => t('administer droogle'),
      'description' => t('administer droogle'),
    ),
    'upload google docs' => array(
      'title' => t('upload google docs'),
      'description' => t('upload google docs'),
    ),
    'view google docs' => array(
      'title' => t('view google docs'),
      'description' => t('view google docs'),
    ),
      'view hourly rate' => array(
          'title' => t('view hourly rate'),
          'description' => t('view hourly rate'),
      ),
  );
}

/**
 * Implements hook_menu().
 */
function droogle_menu() {
  $items = array();
  $items['droogle_gdrive_create_file'] = array(
    'title' => 'Gdrive File Upload',
    'page callback' => 'droogle_file_upload',
    'access arguments' => array('access content'),
  );
  $items['droogle'] = array(
    'title' => 'droogle',
    'page callback' => 'droogle_list_files',
    'access arguments' => array('view google docs'),
  );
  $items['admin/settings/droogle'] = array(
    'title' => 'Droogle Settings',
    'description' => 'Configuration of who can upload to google docs from an OG droogle block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('droogle_settings_form'),
    'access arguments' => array('administer droogle'),
  );
  $items['droogle_get_google_token'] = array(
    'title' => 'droogle',
    'page callback' => 'droogle_get_google_token',
    'access arguments' => array('administer droogle'),
  );

    $items['droogle/ajax/%'] = array(
        'page callback' => 'handleAjaxCalls', // Render HTML
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['droogle/deletefile/%'] = array(
        'page callback' => 'deletefile', // Render HTML
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['compliance-officer-hourly-rate'] = array(
        'title' => 'Compliance Officer Hourly Rate',
        'access arguments' => array('view hourly rate'),
    );

  return $items;
}

/**
 * Uses the form api for an admin settings form.
 */
function droogle_settings_form() {
  global $user;
  $droogle_clientid = variable_get('droogle_clientid', '');
  $droogle_secret = variable_get('droogle_secret', '');
  $droogle_title_text = variable_get('droogle_title_text', '');
  $droogle_password = variable_get('droogle_password', '');
  $droogle_refresh_token = variable_get('droogle_refresh_token', '');
  $droogle_og_clientid_cck_field = variable_get('droogle_og_cck_field_gdrive_client_id');
  $droogle_og_clientsecret_cck_field = variable_get('droogle_og_cck_field_gdrive_client_secret');
  $droogle_default_domain = variable_get('droogle_default_domain', '');

  $form['droogle_default_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the default domain to use to form links to your google docs ie: babson.edu, if your email address is simply yourname@gmail.com then do not worry about this, but if you are using a google education or business account and your gmail address is yourname@babson.edu for instance then enter a value for this field'),
    '#default_value' => $droogle_default_domain,
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('the default domain to use in creating links to your google docs'),
  );
  $form['sitewide_nonog'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings controlling the non Organic Groups context for Droogle'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['sitewide_nonog']['droogle_title_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the title to put at the top of the droogle page (when not within an Organic Groups context)'),
    '#default_value' => $droogle_title_text,
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('the non OG title of the droogle page, default is:  "DROOGLE: A list of your google docs"'),
  );
  $form['sitewide_nonog']['droogle_clientid'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the google client id to use (when not within an Organic Groups context)
                  -- you can generate a client id at https://cloud.google.com/console'),
    '#default_value' => $droogle_clientid,
    '#size' => 100,
    '#maxlength' => 150,
    '#description' => t('the non OG google client id'),
  );
  $form['sitewide_nonog']['droogle_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the google client secret to use (when not within an Organic Groups context)
                  -- you can generate a client secret at https://cloud.google.com/console'),
    '#default_value' => $droogle_secret,
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('the non OG google client secret'),
  );
  $form['sitewide_nonog']['droogle_refresh_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the google refresh token, generate one by going to
      the url http://yoururl.com/droogle_get_google_token but MAKE SURE TO ENABLE THE DEVEL MODULE FIRST,
      you can disable the devel module after you generate the refresh token, ignore the error and
      copy and paste the refesh token generated (not the access code) into this text box'),
    '#default_value' => $droogle_refresh_token,
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('the google refresh token so the login to google does not timeout'),
  );
  if (module_exists('og')) {
    $form['single_groups'] = array(
      '#type' => 'fieldset',
      '#title' => t('Overriding google username and password for individual Organic Group(s)'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['single_groups']['droogle_og_cck_field_gdrive_client_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter the "group" content types cck field machine name to use to override
                    a particular groups google client id)'),
      '#default_value' => $droogle_og_clientid_cck_field,
      '#size' => 60,
      '#maxlength' => 64,
      '#description' => t('the OG group cck field to use to set a particular OG droogle password
                          -- you will have to setup a new cck field for the "group" content type
                          matching the machine name set on this page'),
    );
    $form['single_groups']['droogle_og_cck_field_gdrive_client_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter the "group" content types cck field machine name to use to override
                    a particular groups google client secret -- this is optional and if the field
                    is left empty when configuring a particular group, the global Droogle organic
                    groups settings will be followed)'),
      '#default_value' => $droogle_og_clientsecret_cck_field,
      '#size' => 60,
      '#maxlength' => 64,
      '#description' => t('the OG group cck field to use to set a particular OG droogle password
                          -- you will have to setup a new cck field for the "group" content type
                          matching the machine name set on this page'),
    );
  }
    $form = system_settings_form($form);
    $form['#submit'][] = 'droogle_settings_form_submit';
    return $form;
}

/**
 * Form submission handler droogle_settings_form().
 */
function droogle_settings_form_submit($form, &$form_state) {
  
}

function droogle_get_google_token() {
  $url = "https://accounts.google.com/o/oauth2/auth";
  $client_id = variable_get('droogle_clientid', '');
  $client_secret = variable_get('droogle_secret', '');
  //$redirect_uri = "http://" . $_SERVER['HTTP_HOST'] . "/droogle_get_google_token";
  $redirect_uri = "http://olse.sfgov.org/droogle_get_google_token";

  $access_type = "offline";
  $approval_prompt = "force";
  $grant_type = "authorization_code";
  $scope = 'https://www.googleapis.com/auth/drive https://spreadsheets.google.com/feeds https://docs.google.com/feeds';

  $params_request = array(
    "response_type" => "code",
    "client_id" => "$client_id",
    "redirect_uri" => "$redirect_uri",
    "access_type" => "$access_type",
    "approval_prompt" => "$approval_prompt",
    "scope" => "$scope"
    );

  $request_to = $url . '?' . http_build_query($params_request);

  if(isset($_GET['code'])) {
    // try to get an access token
    $code = $_GET['code'];
    $url = 'https://accounts.google.com/o/oauth2/token';
    $params = array(
        "code" => $code,
        "client_id" => "$client_id",
        "client_secret" => "$client_secret",
        "redirect_uri" => "$redirect_uri",
        "grant_type" => "$grant_type"
    );

    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);	

    $json_response = curl_exec($curl);
    curl_close($curl);

    $authObj = json_decode($json_response);
    $result = array();
    $result['refresh_token'] = $authObj->refresh_token;
    $result['access_token'] = $authObj->access_token;

}

header("Location: " . $request_to);
error_log($result['refresh_token']);
dpm($result);
return 'refesh token is ' . $result['refresh_token'];
  
}

/**
 *  Implements hook_block_info().
 */
function droogle_block_info() {
  $blocks = array();
  $blocks['droogle-og-block'] = array(
    'info' => t('Droogle OG Block'),
  );
  return $blocks;
}

 /**
  *  Implements hook_block_view().
  */
function droogle_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'droogle-og-block':
      $block['subject'] = t('Droogle OG Block');
      $block['content'] = droogle_list_files();
      break;
  }
  return $block;
}


/*
 *  Function connects to google drive.
 */
function droogle_gdrive_connect($redirect_uri = NULL, $client_id = NULL, $client_secret = NULL, $redirect_uri = NULL) {
  watchdog('redirect_uri', 'redirect is ' . $redirect_uri);
  if ($path = libraries_get_path('google-api-php-client-git-version')) {
    ini_set('include_path',ini_get('include_path').':' . $_SERVER['DOCUMENT_ROOT'] . '/sites/all/libraries/google-api-php-client-git-version/src');
    require_once 'Google/autoload.php';
    require_once 'Google/Client.php';
    require_once 'Google/Http/MediaFileUpload.php';
    require_once 'Google/Service/Drive.php';


      require_once 'Google/Spreadsheet/ServiceRequestInterface.php';
      require_once 'Google/Spreadsheet/DefaultServiceRequest.php';
      require_once 'Google/Spreadsheet/ServiceRequestFactory.php';
      require_once 'Google/Spreadsheet/Exception.php';
      require_once 'Google/Spreadsheet/UnauthorizedException.php';
      require_once 'Google/Spreadsheet/Util.php';
      require_once 'Google/Spreadsheet/SpreadsheetService.php';
      require_once 'Google/Spreadsheet/Spreadsheet.php';
      require_once 'Google/Spreadsheet/SpreadsheetFeed.php';
      require_once 'Google/Spreadsheet/WorksheetFeed.php';
      require_once 'Google/Spreadsheet/Worksheet.php';
      require_once 'Google/Spreadsheet/ListFeed.php';
      require_once 'Google/Spreadsheet/ListEntry.php';
      require_once 'Google/Spreadsheet/CellFeed.php';
      require_once 'Google/Spreadsheet/CellEntry.php';
      require_once 'Google/Spreadsheet/Batch/BatchRequest.php';
      require_once 'Google/Spreadsheet/Batch/BatchResponse.php';
  }
  else {
    drupal_set_message('You need to install the google api client library in the folder
      google-api-php-client-git-version within the sites/all/libraries folder');
  }

  /************************************************
    ATTENTION: Fill in these values! Make sure
    the redirect URI is to this page, e.g:
    http://localhost:8080/fileupload.php
   ************************************************/
  if (module_exists('og_context')) {
    $group_google_clientid_cck = 'field_' . variable_get('droogle_og_cck_field_gdrive_client_id');
    $group_google_clientsecret_cck = 'field_' . variable_get('droogle_og_cck_field_gdrive_client_secret');
    $current_group = og_context();
    if (isset($current_group->etid)) {
      $group_node = node_load($current_group->etid);
      $client_id = $group_node->{$group_google_clientid_cck}['und'][0]['value'];
      $client_secret = $group_node->{$group_google_clientsecret_cck}['und'][0]['value'];
    }
  }
  
  if (!isset($droogle_clientid) || !isset($droogle_secret)) {
    $droogle_clientid = variable_get('droogle_clientid', '');
    $droogle_secret = variable_get('droogle_secret', '');
  }
  $client = new Google_Client();
  $client->setClientId($droogle_clientid);
  $client->setClientSecret($droogle_secret);
  //$client->setRedirectUri('http://' . $_SERVER['HTTP_HOST'] . '/olsecms/droogle' . $redirect_uri);
  $client->setRedirectUri('http://olse.sfgov.org/droogle');

  //$client->addScope("https://www.googleapis.com/auth/drive");
  $client->setScopes(array('https://www.googleapis.com/auth/drive','https://spreadsheets.google.com/feeds', 'https://docs.google.com/feeds'));
  //$client->addScope("https://spreadsheets.google.com/feeds");


  $service = new Google_Service_Drive($client);

  if (isset($_REQUEST['logout'])) {
    unset($_SESSION['upload_token ']);
  }

  if (isset($_GET['code'])) {
    $client->authenticate($_GET['code']);
    $_SESSION['upload_token'] = $client->getAccessToken();
    $redirect = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];
    header('Location: ' . filter_var($redirect, FILTER_SANITIZE_URL));
  }

  if (isset($_SESSION['upload_token']) && $_SESSION['upload_token']) {
    $client->setAccessToken($_SESSION['upload_token']);
    if ($client->isAccessTokenExpired()) {
      unset($_SESSION['upload_token']);
    }
  } else {
    $authUrl = $client->createAuthUrl();
  }
  $return_result['client'] = $client;
  $return_result['service'] = $service;
  if (isset($authUrl)) {
    $return_result['authUrl'] = $authUrl;
  }
  return $return_result;
}

/*
 *  Function creates a google drive document.
 *  This functionality works but the module will
 *  do more with it soon in coming versions.
 */
function droogle_file_upload($doctype = 'word', $doc_title = NULL, $role = NULL, $type = NULL, $permission_values = NULL) {
  unset($result);
  $return_result = droogle_gdrive_connect('droogle_gdrive_create_file');
  $client = $return_result['client'];
  $service = $return_result['service'];
  if (isset($return_result['authUrl'])) {
    $authUrl = $return_result['authUrl'];
  }
  /************************************************
    If we're signed in then lets try to upload our
    file.
   ************************************************/
  $refresh_token = variable_get('droogle_refresh_token', '');
  if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
    $client->refreshToken($refresh_token);
  }

  if ($client->getAccessToken()) {
    $file = new Google_Service_Drive_DriveFile();
    if (!isset($doc_title)) {
      $doc_title = 'Hello world from the new api! ' . time();
    }
    $file->setTitle($doc_title);
    switch ($doctype) {
        case 'word':
          $file->setMimeType('application/vnd.google-apps.document');
          break;
        case 'excel':
          $file->setMimeType('application/vnd.google-apps.spreadsheet');
          break;
        case 'presentation':
          $file->setMimeType('application/vnd.google-apps.presentation');
          break;
        case 'drawing':
          $file->setMimeType('application/vnd.google-apps.drawing');
          break;
    }
    
    $result = $service->files->insert($file);
    // Permission documentation is here:  https://developers.google.com/drive/v2/reference/permissions and
    // here https://developers.google.com/drive/web/manage-sharing
    $permission = new Google_Service_Drive_Permission();
    if (isset($permission_values)) {
      foreach ($permission_values as $value) {
        $permission->setValue($value);
      }
    }
    else {
    $permission->setValue('jiang.henry@gmail.com');
    }
    
    if (isset($type)) {
      $permission->setType($type);
    }
    else {
      $permission->setType('user');
    }
    
    if (isset($role)) {
      $permission->setRole($role);
    }
    else {
      $permission->setRole('writer');
    }
  
    $service->permissions->insert( $result['id'], $permission );
  }

  $content = '';
  if (isset($authUrl)) {
    $content .= '<a class="login" href=' . $authUrl . '>Connect Me!</a></div>';
  }
  if (isset($result) && $result) {
   //$content .= '<div class="shortened"><pre> ' . print_r($result, TRUE) . '</pre></div></div>';
   drupal_set_message('File was Created in Google Drive!');
  }
  return $content;
}

/*
 *  A page callback for when you go to the droogle url.
 */
function droogle_list_files() {
  $droogle_title_text = variable_get('droogle_title_text', '');
  drupal_set_title($droogle_title_text);
  unset($result);
  $return_result = droogle_gdrive_connect('droogle');
  $client = $return_result['client'];
  $service = $return_result['service'];
  if (isset($return_result['authUrl'])) {
    $authUrl = $return_result['authUrl'];
  }

  /************************************************
    If we're signed in then lets try to upload our
    file.
   ************************************************/
  $refresh_token = variable_get('droogle_refresh_token', '');
  
  if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
    $client->refreshToken($refresh_token);
  }
  if ($client->getAccessToken()) {
    $content = theme('droogle_list_files', array('service' => $service));
  }
  elseif (isset($authUrl)) {
    $content = '<a class="login" href=' . $authUrl . '>Connect Me!</a></div>';
  }
  return $content;
}

/**
 * Implements hook_theme().
 *
 * Information on hook theme http://groups.drupal.org/node/14274#comment-57950.
 *    1. hook_theme which adds an array of callbacks and their arguments to the
 *      theme registry. I didn't realize that I had to visit the modules page to
 *      rebuild the theme registry before it would be added.
 *    2. The themable function itself which starts with theme_ followed by the
 *      function name that was added to the registry with hook_theme.
 *    3. theme("whatever_function, $whatever_argument, $whatever_argument ")
 *     which actually calls the function.
 */
function droogle_theme() {
  return array(
    'droogle_list_files' => array(
      'arguments' => array(
        'service' => NULL,
      ),
    ),
  );
}

/**
 * Implements of hook_theme().
 *
 * @param array $variables
 *   an array with google document listings.
 *
 * @return string
 *   html with listing of google docs to be output to the screen.
 */
function theme_droogle_list_files($variables) {
  drupal_add_css(drupal_get_path('module', 'droogle') . '/css/onedrive.css');
  drupal_add_css(drupal_get_path('module', 'droogle') . '/css/jquery-ui.css');
  drupal_add_js(drupal_get_path('module', 'droogle') . '/js/onedrive.js');
  drupal_add_js(drupal_get_path('module', 'droogle') . '/js/jquery-ui.js');

  header('X-Frame-Options: GOFORIT');

  $service = $variables['service'];
  $files = $service->files->listFiles();
  $file_list = $files->getItems();
  $content = '<ul>';
  // Below line if for debugging.
  // $content .= '<div class="shortened">File List:  <pre> ' . print_r($file_list, TRUE) . '</pre></div></div>';
  foreach ($file_list as $file) {
    if ($file['mimeType'] == 'application/vnd.google-apps.folder' || (isset($file['explicitlyTrashed']) && $file['explicitlyTrashed'] == 1)) {
      // Don't list folders, just files (for now). It's displaying all files in folders anyhow.
      continue;
    }
    switch ($file['mimeType']) {
      case 'application/vnd.google-apps.document':
        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="word">' . $file["title"] . '</li></a>';
        break;
      case 'application/vnd.google-apps.spreadsheet':
        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="excel">' . $file["title"] . '</li></a>';
        break;
      case 'application/vnd.google-apps.presentation':
        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="presentation">' . $file["title"] . '</li></a>';
        break;
      case 'application/vnd.google-apps.drawing':
        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="drawing">' . $file["title"] . '</li></a>';
        break;
    }
  }
  $content .= '</ul>';

  // display google docs via iframe
  //$content .= '<div id="googledocs" title=""><iframe class="gdoc-field" name="gdoc_embbed" id="gdoc_embbed" src=""></iframe></div>';
  //  $content .= '<div id="googledocs" title=""><p>this is a test</p></div>';

    if (isset($result) && $result) {
   // For debugging
   //$content .= '<div class="shortened"><pre> ' . print_r($result, TRUE) . '</pre></div></div>';
   
  }
  return $content;
}


/**
 * @param $params in node id - targetid format
 * @param $type, type of request to handle
 */
function handleAjaxCalls($params){
    //error_log("params ".$params);
    parse_str(rawurldecode($params), $params_array);

    switch ($params_array['type']) {
        case 'create': createGoogleDocs($params_array);
            break;
        case 'worksheet': createPaymentWorksheet($params_array);
            break;
        case 'paymenttracking': createPaymentTracking($params_array);
            break;
        case 'resetworksheet': resetGoogleDocs($params_array);
            break;
        default: break;

    }
 }

/** creates initial worksheet for payments
 * @Paramter: nid - current node ID
 *
 * @Returns: Array - cell records from google spreadsheet
 **/
function createGoogleDocs($params_array){
    // get node title
    $nid = $params_array['nid'];

    $select = "select field_ownership_name_value as businessname, field_primary_business_contact_value as businesscontact, F.field_address_value as businessaddress
     from node A
     left join field_data_field_ownership_name B on B.entity_id = A.nid
     left join field_data_field_primary_business_contact C on C.entity_id = A.nid
     left join field_data_field_primary_business_contact_a D on D.entity_id = A.nid
     left join field_data_field_business_address E On E.entity_id = D.field_primary_business_contact_a_value
     left join field_data_field_address F on F.entity_id = E.field_business_address_value AND E.bundle='field_primary_business_contact_a'
     where A.nid='$nid'; ";
    $businessinfo =  db_query($select)->fetchAssoc();

    /*$filename =  db_query($select)->fetchField();
    if(!$filename)
        drupal_json_output("{'Error': 'Cannnot get filename from database.'}");
    */
    // get a list of files
    $return_result = droogle_gdrive_connect('droogle');

    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }
    $refresh_token = variable_get('droogle_refresh_token', '');

    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }
    if ($client->getAccessToken()) {
        $accessToken = json_decode($client->getAccessToken());
        // This is uploading a file directly, with no metadata associated.
        $file = new Google_Service_Drive_DriveFile();
        //$file->setTitle(str_replace("-", "_", "Payment")."_$nid");
        $file->setTitle("Payment for Case "." $nid");
        //$file->setMimeType("application/vnd.google-apps.spreadsheet");

        $parent = new Google_Service_Drive_ParentReference();
        // set folder ID, need to move this to settings
        $parent->setId('0B-4UpyyvuVuyfjVuWklGVnpwN1dYSmJ2Ni1pOHJxUUpsZUJuV0RKdFpnRlE0aXBqWnR2bm8');
        $file->setParents(array($parent));

        $data = "\nGOOGLE SPREADSHEET\n\n";
        // fill in business info
        $data .= $businessinfo['businessname']."\n";
        $data .= $businessinfo['businesscontact']."\n";
        $data .= $businessinfo['businessaddress']."\n\n";

        $data .= "\nEmployee List \t\n\t Employee First Name\t Employee Last Name \t";

        $lists = explode("|", $params_array['checklist']);

        foreach($lists as $list){
            if($list != ''){
               $data .= "$list \t";
            }
        }

        $data .= "Total Due";
        $data .= "\n\tCity and County of San Francisco";
        for($i=3;$i<$params_array['numberC']+3;$i++)
            $data .= "\n". ($i - 2) . "\t\t\t";
        $data .="\nTotal";
        $result = $service->files->insert(
            $file,
            array(
                'data' => $data,
                'mimeType' => "application/vnd.oasis.opendocument.spreadsheet",
                'uploadType' => 'media',
                'convert' => true,
            )
        );

        if($result)
            drupal_json_output($result);

    }
}
/** creates 2nd worksheet for payments
 * @Paramter: nid - current node ID
 *
 * @Returns: Array - cell records from google spreadsheet
**/

function createPaymentWorksheet($params_array){
    global $user;
    $return_result = droogle_gdrive_connect('droogle');
    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }
    $refresh_token = variable_get('droogle_refresh_token', '');

    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }
    if ($client->getAccessToken()) {

        $accessToken = json_decode($client->getAccessToken());
        $nid = $params_array['nid'];

        $serviceRequest = new Google\Spreadsheet\DefaultServiceRequest($accessToken->access_token);
        Google\Spreadsheet\ServiceRequestFactory::setInstance($serviceRequest);

        $spreadsheetService = new Google\Spreadsheet\SpreadsheetService();
        //$spreadsheetFeed = $spreadsheetService->getSpreadsheets();

        $spreadsheet = $spreadsheetService->getSpreadsheetById($params_array['fileid']);
        $worksheetFeed = $spreadsheet->getWorksheets();

        $worksheet = $worksheetFeed->getByTitle($params_array['title']);
        $listFeed = $worksheet->getCellFeed();

        // batch process
        $batchrequest = new Google\Spreadsheet\Batch\BatchRequest();

        $interval = 1; // months of payment period
        switch( strtolower($params_array['frequency'])){
            case "quarterly": $interval = 3;
                break;
            case "6months": $interval = 6;
                break;
            default:
                break;
        }
        $headers_array =  Array();
        if( ! ($paymentworksheet =  $worksheetFeed->getByTitle('Payment Schedule'))){
            $paymentworksheet = $spreadsheet->addWorksheet('Payment Schedule', 100, $params_array['payments'] + 200);
        }
        // Add headers, Headers are allowed to have spaces and upper case, but when referenced it strips spaces and convert to lowercase.
        $cellFeed = $paymentworksheet->getCellFeed();

       //populate sheet 1 data into sheet 2
        $startrow = 0;
        $totalcols = $worksheet->getColCount();
        $data = Array();
        $totalnumbers = Array();
        $i = 0;
        foreach ($listFeed->getEntries() as $entry) {
            // if last row, get the totals and break
            if($entry->getContent() == "Total"){
                break;
            }
            // find start of employee data
            if(trim($entry->getContent()) == "Employee First Name")
                $startrow = $entry->getRow();
            else if($startrow < 1)
                continue;

            if(trim($entry->getContent()) == "City and County of San Francisco"){
                //$data[$i][$entry->getColumn()] = $entry->getContent();
                $i++;
                continue;
            }
            // get employee header
            if($entry->getColumn() > 1){
                $data[$i][$entry->getColumn()] = $entry->getContent();
                continue;
            }
            $i++;
        }
       // transpose $data into of the form data[index][column name] = column value;
        $row_data = array();
        $row_headers = array();
        for($j=0;$j <= count($data); $j++){
            if(! isset($data[$j])) continue;
            // use header as key
            if( empty($row_headers)){ $row_headers = $data[$j]; continue; }
            for($k=1;$k <= $totalcols; $k++){
                if( isset($data[$j][$k]))
                    $row_data[$j][$row_headers[$k]] = $data[$j][$k];
            }
        }

        // Fill in Payment schedule headers
        $select = "select field_ownership_name_value as businessname, field_primary_business_contact_value as businesscontact, F.field_address_value as businessaddress
     from node A
     left join field_data_field_ownership_name B on B.entity_id = A.nid
     left join field_data_field_primary_business_contact C on C.entity_id = A.nid
     left join field_data_field_primary_business_contact_a D on D.entity_id = A.nid
     left join field_data_field_business_address E On E.entity_id = D.field_primary_business_contact_a_value
     left join field_data_field_address F on F.entity_id = E.field_business_address_value AND E.bundle='field_primary_business_contact_a'
     where A.nid='$nid'; ";
        $businessinfo =  db_query($select)->fetchAssoc();

        $batchrequest->addEntry($cellFeed->createInsertionCell(3,1, $businessinfo['businessname']));
        $batchrequest->addEntry($cellFeed->createInsertionCell(4,1, $businessinfo['businesscontact']));
        $batchrequest->addEntry($cellFeed->createInsertionCell(5,1, $businessinfo['businessaddress']));
        $batchrequest->addEntry($cellFeed->createInsertionCell(8,1, "Exhibit  "));
        $batchrequest->addEntry($cellFeed->createInsertionCell(7,4,"PAYMENT #"));
        $cellnumber = 5; $rowIndex = 9;
        for($j=5; $j < $params_array['payments'] + 5; $j++){
            $paymentdates = strtotime("+".$interval * ($j - 4)." months", strtotime(str_replace("_","/",$params_array['startdate'])));
            $cell_header = date('m/d/Y',$paymentdates);
            $batchrequest->addEntry($cellFeed->createInsertionCell(7,$cellnumber, $j - 4 ));
            $batchrequest->addEntry($cellFeed->createInsertionCell(8,$cellnumber,"Installment &amp;#xD; Total"));
            // Assessments for workers
            for($options=1; $options < count($row_headers) - 2; $options++){
                $batchrequest->addEntry($cellFeed->createInsertionCell(8,$cellnumber + $options, $row_headers[$options + 3]));
            }
            $batchrequest->addEntry($cellFeed->createInsertionCell(7,$cellnumber+1, $cell_header));
            $cellnumber += $options;
        }
        $batchrequest->addEntry($cellFeed->createInsertionCell(9,2,"Employee First Name"));
        $batchrequest->addEntry($cellFeed->createInsertionCell(9,3,'Employee Last &amp;#xD; Name'));
        $batchrequest->addEntry($cellFeed->createInsertionCell(9,4,"Total Due"));

        $cellFeed->insertBatch($batchrequest);

      // for each employee
      for($i=2;$i <= count($row_data) + 1; $i++){
          // total due for each employee
          $total = $row_data[$i][$row_headers[count($row_headers) + 1]];
          $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,4,$total));
          // employee names
          $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,2,$row_data[$i][$row_headers[2]] ));
          $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,3,$row_data[$i][$row_headers[3]] ));

          $eachpayment = $total / $params_array['payments'];

          // for each payment period
          for($k=1; $k < $params_array['payments'] + 1; $k++){
                // for each assessment type(backwages, health care rememdy,HRA...etc
                $headerCount = count($row_headers);
                $columnIndex = 0;
                $checknext = false;
                for($j=4; $j <= $headerCount; $j++){
                    // Column for each payment starts with increment of $headers
                    // $row_data[$i][$row_headers[$j]] = each assessments type total
                    if($columnIndex == 0)
                        $columnIndex = ($headerCount - 2) * $k + ($j - 3);
                    // fill each "Installment Total"
                    $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,$columnIndex,$eachpayment));
                    // process next assessment type
                    if($row_data[$i][$row_headers[$j]] <= 0 && !$checknext)
                        continue;

                    // need to take care of the case where $eachpayment > current assessment total
                    // if remaining balance for current assessment type is greater than 0, go to next payment
                    if(($row_data[$i][$row_headers[$j]] -= $eachpayment) > 0 ){
                        //error_log("Amount left in assessment type " .$row_headers[$j] . ": " . $row_data[$i][$row_headers[$j]]);
                        $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,$columnIndex + ($j -3),$eachpayment));
                        break;
                    }
                    else{
                        //split payment per assessment type
                        $remainder = $eachpayment - ($row_data[$i][$row_headers[$j]] * -1);

                        $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,$columnIndex + ($j - 3),$remainder));
                        $nextpayment = $eachpayment - $remainder;
                        if($nextpayment > 0)
                            $batchrequest->addEntry($cellFeed->createInsertionCell($i+$rowIndex,$columnIndex + ($j-2),$nextpayment));

                        // if remainder is greater than next assessment amount, move to next assessment type.
                        if($k == $params_array['payments']) break;
                        $row_data[$i][$row_headers[$j+1]] -= $nextpayment;
                        if($row_data[$i][$row_headers[$j+1]] <= 0){
                            $checknext = true;
                        }
                        else
                            break;
                    }
                }
            }
      }
    }
    // for each penalties to the city payment.
    $batchrequest->addEntry($cellFeed->createInsertionCell($i + $rowIndex + 2,1, "Penalties to the city"));
    $each_penalties_payment_amount =$params_array['city_penalties'] / $params_array['city_penalties_payments'];
    for($zz=1; $zz <= $params_array['city_penalties_payments']; $zz++){
        $paymentdates = strtotime("+".$interval * ($zz + $params_array['payments'])." months", strtotime(str_replace("_","/",$params_array['startdate'])));
        $cell_header = date('m/d/Y',$paymentdates);
        $payments = "Payment ". ($zz + $params_array['payments'])."  | $cell_header";
        $batchrequest->addEntry($cellFeed->createInsertionCell($i + $rowIndex + 2,$zz+1,$payments));
        $batchrequest->addEntry($cellFeed->createInsertionCell($i + $rowIndex + 3,$zz+1, $each_penalties_payment_amount));
    }
    $cellFeed->insertBatch($batchrequest);
    // create csv file for importDATA
    /*$dir = variable_get('file_public_path', conf_path() . '/files');
    file_put_contents($dir."/".$user->name . "_tmp.csv", $output);
    $url = "http://apps.sfgov.org/olsecms/sites/default/files/".$user->name."_tmp.csv";
    $cellFeed->editCell(10,2, '=importDATA("'.$url.'")');
        */
    //print json_encode($output);
}

/** creates 3rd worksheet for payments tracking purpose
 * @Paramter: nid - current node ID
 *
 * @Returns: Array - cell records from google spreadsheet
 **/

function createPaymentTracking($params_array){
    global $user;
    $return_result = droogle_gdrive_connect('droogle');
    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }
    $refresh_token = variable_get('droogle_refresh_token', '');

    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }

    if ($client->getAccessToken()) {
        $accessToken = json_decode($client->getAccessToken());
        $nid = $params_array['nid'];

        $serviceRequest = new Google\Spreadsheet\DefaultServiceRequest($accessToken->access_token);
        Google\Spreadsheet\ServiceRequestFactory::setInstance($serviceRequest);

        $spreadsheetService = new Google\Spreadsheet\SpreadsheetService();
        $spreadsheet = $spreadsheetService->getSpreadsheetById($params_array['fileid']);
        $worksheetFeed = $spreadsheet->getWorksheets();

        $worksheet = $worksheetFeed->getByTitle($params_array['title']);
        $listFeed = $worksheet->getCellFeed();

        // batch process
        $batchrequest = new Google\Spreadsheet\Batch\BatchRequest();

        $headers_array =  Array();
        if( ! ($paymentworksheet =  $worksheetFeed->getByTitle('Payment Tracking'))){
            $paymentworksheet = $spreadsheet->addWorksheet('Payment Tracking', $params_array['payments'] * 14 + 10, 30);
        }
        // Add headers, Headers are allowed to have spaces and upper case, but when referenced it strips spaces and convert to lowercase.
        $cellFeed = $paymentworksheet->getCellFeed();

        //populate sheet 1 data into sheet 3
        $startrow = 0;
        $totalcols = $worksheet->getColCount();
        $data = Array();
        $i = 0;
        foreach ($listFeed->getEntries() as $entry) {
            // if last row, get the totals and break
            if($entry->getContent() == "Total"){
                break;
            }
            // find start of employee data
            if(trim($entry->getContent()) == "Employee First Name")
                $startrow = $entry->getRow();
            else if($startrow < 1)
                continue;

            if(trim($entry->getContent()) == "City and County of San Francisco"){
                //$data[$i][$entry->getColumn()] = $entry->getContent();
                $i++;
                continue;
            }
            // get employee header
            if($entry->getColumn() > 1){
                $data[$i][$entry->getColumn()] = $entry->getContent();
                continue;
            }
            $i++;
        }
        // transpose $data into of the form data[index][column name] = column value;
        $row_data = array();
        $row_headers = array();
        for($j=0;$j <= count($data); $j++){
            if(! isset($data[$j])) continue;
            // use header as key
            if( empty($row_headers)){ $row_headers = $data[$j]; continue; }
            for($k=1;$k <= $totalcols; $k++){
                if( isset($data[$j][$k]))
                    $row_data[$j][$row_headers[$k]] = $data[$j][$k];
            }
        }

        // Fill in Payment schedule headers
        $batchrequest->addEntry($cellFeed->createInsertionCell(1,1,"Payment Tracking"));
        $batchrequest->addEntry($cellFeed->createInsertionCell(2,1, "Case Number $nid"));

        $interval = 1; // months of payment period
        switch( strtolower($params_array['frequency'])){
            case "quarterly": $interval = 3;
                break;
            case "6months": $interval = 6;
                break;
            default:
                break;
        }
        // Begining of payment tracking for each payment
        $rowIndex = 4;
        for($iPayments = 1; $iPayments < $params_array['payments'] + 1; $iPayments++){
            $paymentdates = strtotime("+".$interval * ($iPayments)." months", strtotime(str_replace("_","/",$params_array['startdate'])));
            $paymentdates = date('m/d/Y',$paymentdates);
            $subscript = $iPayments.getNumberSuperscript($iPayments);
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,1, "$subscript Installment"));
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,2, $paymentdates));
            // for each employee + header

            for($j = 0; $j < count($row_data) + 3; $j++){
                $rowIndex++;

                if($j == 0){ // fill in header
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,2, "Employee First Name"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex+1,2, "City and County of San Francisco"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,3, "Employee Last Name"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,4, "Additional Identifier"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,5, "Total Due"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,6, "Total Received to Date"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,7, "Installment Total"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,8, "Date Paid"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,9, "Total Received"));
                    for($z = 1; $z < count($row_headers) - 3; $z++){
                        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,9 + $z, $row_headers[$z + 1]));
                    }
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,9 + $z + 1, "Penalty to City"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex+1,9 + $z + 1, $params_array['penalties_city']));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,9 + $z + 2, "Payment Disposition (DDL)"));
                    $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,9 + $z + 3, "Locate EE Notes"));
                    continue;
                }
                // first payment option is to city and county of san francisco
                elseif($j == 1) continue;
                if($j == 2) $starSubtotalRowIndex = $rowIndex;
                $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,1, $j - 1));
                for($k = 2; $k < count($row_headers) + 2; $k++){
                    if($k < 4){ // first and last name
                        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,$k , $row_data[$j][$row_headers[$k]]));
                    }
                    else if($k == count($row_headers) + 1) // total due
                        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,$k - 2, $row_data[$j][$row_headers[count($row_headers)-1]]));
                }
            }
            // last row for each payment
            $subtotal = "=sum(E".$starSubtotalRowIndex.":E". ($rowIndex - 1) . ")";
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex,1, "Subtotal"));
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex++,5, "$subtotal"));
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex++,1, ""));
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex++,1, ""));

        }

        // for each penalties to the city payment.
        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2,2, "Penalties to the city"));
        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2,5, "Total Due"));
        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2,6, "Total Received to Date"));
        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2,7, "Installment Total"));
        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2,8, "Date Paid"));
        $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2,9, "Total Received"));
        $each_penalties_payment_amount = $params_array['city_penalties'] / $params_array['city_penalties_payments'];
        for($zz=1; $zz <= $params_array['city_penalties_payments']; $zz++){
            $subscript = $params_array['payments']+$zz.getNumberSuperscript($params_array['payments'] + $zz);
            $paymentdates = strtotime("+".$interval * ($zz + $params_array['payments'])." months", strtotime(str_replace("_","/",$params_array['startdate'])));
            $cell_header = date('m/d/Y',$paymentdates);
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2 + $zz,1, $subscript." payment ($cell_header)"));
            $batchrequest->addEntry($cellFeed->createInsertionCell($rowIndex + 2 + $zz,5, $each_penalties_payment_amount));
        }

        $cellFeed->insertBatch($batchrequest);
    }
}

/**
 *  utility function get get number superscript
 */
function getNumberSuperscript($input){
    $ret = "th";
    if($input < 10 || $input > 20){
        switch($input % 10){
            case 1: $ret = "st"; break;
            case 2: $ret = "nd"; break;
            case 3: $ret = "rd"; break;
            default: $ret = "th"; break;
        }
    }
    return $ret;
}
 /** reset worksheets, let user start over
 * @Paramter: array of $_REQUEST variables
 *
 * @Returns: Array - cell records from google spreadsheet
 **/

function resetGoogleDocs($params_array){
    $return_result = droogle_gdrive_connect('droogle');

    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }
    $refresh_token = variable_get('droogle_refresh_token', '');

    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }
    if ($client->getAccessToken()) {
        $accessToken = json_decode($client->getAccessToken());

        //$serviceRequest = new Google\Spreadsheet\DefaultServiceRequest($accessToken->access_token);
        //Google\Spreadsheet\ServiceRequestFactory::setInstance($serviceRequest);

        try {
            //$serviceRequest->delete("https://www.googleapis.com/drive/v2/files/".$params_array['fileid']);
            $service->files->delete($params_array['fileid']);
        } catch (Exception $e) {
            print "An error occurred: " . $e->getMessage();
        }

    }
    //print json_encode($ReturnData);
}

/**
@param Google_Service_Drive $service Drive API service instance.
@return folder ID
 */
function getFolder($title){
    $return_result = droogle_gdrive_connect('droogle_gdrive_create_file');
    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }
    /************************************************
    If we're signed in then lets try to upload our
    file.
     ************************************************/
    $refresh_token = variable_get('droogle_refresh_token', '');
    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }

    if ($client->getAccessToken()) {
        $file = new Google_Service_Drive_DriveFile();
        $file->setTitle($title); //name of the folder
        $file->setDescription('Folder for '. $title);
        $file->setMimeType('application/vnd.google-apps.folder');

        // Set the parent folder.

        $parent = new Google_Service_Drive_ParentReference();
        //$parent->setId('0B-4UpyyvuVuyfjVuWklGVnpwN1dYSmJ2Ni1pOHJxUUpsZUJuV0RKdFpnRlE0aXBqWnR2bm8');
        $parent->setId('0B-4UpyyvuVuyfjVuWklGVnpwN1dYSmJ2Ni1pOHJxUUpsZUJuV0RKdFpnRlE0aXBqWnR2bm8');
        $file->setParents(array($parent));

        $createdFile = $service->files->insert($file, array(
            'mimeType' => 'application/vnd.google-apps.folder',
        ));
        // set global variable
        return $createdFile->id;
    }
    else{
        drupal_set_message('Failed to create a case folder in google drive, please contact technical support');
    }
}

/**
@param Google_Service_Drive $service Drive API service instance.
@param string $title Title of the file to insert, including the extension.
@param string $description Description of the file to insert.
@param string $parentId Parent folder's ID.
@param string $mimeType MIME type of the file to insert.
@param string $filename Filename of the file to insert.
@return Google_Service_Drive_DriveFile The file that was inserted. NULL is returned if an API error occurred.
 */
function insertFile($service, $description, $parentId, $original_file_name, $filename) {
    $file = new Google_Service_Drive_DriveFile();
    $file->setTitle($original_file_name);
    $file->setDescription($description);

    $info = new SplFileInfo($original_file_name);
    $mime_types= array(
        "xls" =>'application/vnd.ms-excel',
        "xlsx" =>'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        "xml" =>'text/xml',
        "ods"=>'application/vnd.oasis.opendocument.spreadsheet',
        "csv"=>'text/plain',
        "tmpl"=>'text/plain',
        "pdf"=> 'application/pdf',
        "php"=>'application/x-httpd-php',
        "jpg"=>'image/jpeg',
        "png"=>'image/png',
        "gif"=>'image/gif',
        "bmp"=>'image/bmp',
        "txt"=>'text/plain',
        "doc"=>'application/msword',
        "docx"=>'application/msword',
        "js"=>'text/js',
        "swf"=>'application/x-shockwave-flash',
        "mp3"=>'audio/mpeg',
        "zip"=>'application/zip',
        "rar"=>'application/rar',
        "tar"=>'application/tar',
        "arj"=>'application/arj',
        "cab"=>'application/cab',
        "html"=>'text/html',
        "htm"=>'text/html',
        "default"=>'application/octet-stream',
        "folder"=>'application/vnd.google-apps.folder'
    );

    $file->setMimeType($mime_types[strtolower($info->getExtension())]);
    // Set the parent folder.
    if ($parentId != null) {
        $parent = new Google_Service_Drive_ParentReference();
        $parent->setId($parentId);
        $file->setParents(array($parent));
    }

    try {
        $data = file_get_contents($filename);
        $createdFile = $service->files->insert(
            $file,
            array(
                'data' => $data,
                'uploadType' => 'multipart',
                'mimeType' => $mime_types[strtolower($info->getExtension())],
                'convert' => true,
            )
        );

        return $createdFile;
    } catch (Exception $e) {
        error_log( "An error occurred: " . $e->getMessage());
        return null;
    }
}

/**
@param folderId - files within this folder
 */
function getFolderFiles($folderId){
    $return_result = droogle_gdrive_connect('droogle');
    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }

    /************************************************
    If we're signed in then lets try to upload our
    file.
     ************************************************/
    $refresh_token = variable_get('droogle_refresh_token', '');

    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }
    if ($client->getAccessToken()) {
        do {
            $pageToken = NULL;
            $params = array();
            if ($pageToken) {
                $params['pageToken'] = $pageToken;
            }
            $files = $service->children->listChildren($folderId, $params);
            $file_list = $files->getItems();
            $content = '<ul class="google-files-ul">';

            // Below line if for debugging.
            foreach ($file_list as $a) {

                $file = $service->files->get($a['id']);

                if ($file['originalFilename'] == '' || (isset($file['explicitlyTrashed']) && $file['explicitlyTrashed'] == 1)) {
                    // Don't list folders, just files (for now). It's displaying all files in folders anyhow.
                    continue;
                }
                switch ($file['mimeType']) {
                    case 'application/vnd.google-apps.document' || 'application/msword':
                        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="word">' . $file["title"] . '</li></a>';
                        break;
                    case 'application/vnd.google-apps.spreadsheet':
                        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="excel">' . $file["title"] . '</li></a>';
                        break;
                    case 'application/vnd.google-apps.presentation':
                        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="presentation">' . $file["title"] . '</li></a>';
                        break;
                    case 'application/vnd.google-apps.drawing':
                        $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="drawing">' . $file["title"] . '</li></a>';
                        break;
                    default: $content .= '<a href="' . $file["alternateLink"] . '" class="gdocs-links" target="gdoc_embbed"><li class="drawing">' . $file["title"] . '</li></a>';
                        break;
                }
            }
        }
        while($pageToken);

        $content .= '</ul>';
        return $content;
    }
}
/**
@param file to delete
@param parent id(if exist)
 */
function deletefile($fileId){
    // clean file from db, because file-uri is not a valid drupal entry, file_delete fails causing hook_file_delete to fail as well
    $select = "select fid from {file_managed} where uri='$fileId';";
    $fid = db_query($select)->fetchField();
    db_delete('file_managed')->condition('uri', $fileId)->execute();
    db_delete('file_usage')->condition('fid', $fid)->execute();
    db_delete('field_data_field_attachments')->condition('field_attachments_fid', $fid)->execute();
    entity_get_controller('file')->resetCache();

    $return_result = droogle_gdrive_connect('droogle_gdrive_create_file');
    $client = $return_result['client'];
    $service = $return_result['service'];
    if (isset($return_result['authUrl'])) {
        $authUrl = $return_result['authUrl'];
    }

    $refresh_token = variable_get('droogle_refresh_token', '');
    if(!empty($refresh_token) && $client->isAccessTokenExpired()) {
        $client->refreshToken($refresh_token);
    }

    if ($client->getAccessToken()) {
        try {
            $service->files->delete($fileId);
        } catch (Exception $e) {
            error_log( "An error occurred: " . $e->getMessage() );
        }
    }
}
